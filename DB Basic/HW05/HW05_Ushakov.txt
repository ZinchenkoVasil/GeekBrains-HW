#AUTHOR USHAKOV
#Создание и наполнение базы данных «Сотрудники»:
#DROP SCHEMA `OfficeDB`;

CREATE SCHEMA IF NOT EXISTS `OfficeDB` CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE `OfficeDB`;

CREATE TABLE IF NOT EXISTS `OfficeDB`.`lst_dep` (
`id_dep` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
`dep_title` VARCHAR(150) NOT NULL UNIQUE);

CREATE TABLE IF NOT EXISTS `OfficeDB`.`lst_staff`(
`id_staff` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
`name` VARCHAR(150) NOT NULL,
`surname` VARCHAR(150) NOT NULL,
`position` VARCHAR(150) NOT NULL,
`id_dep` INT NOT NULL,
`salary` INT);

ALTER TABLE `OfficeDB`.`lst_staff` ADD FOREIGN KEY (`id_dep`) REFERENCES `lst_dep`(`id_dep`) ON DELETE RESTRICT ON UPDATE CASCADE;

CREATE TABLE IF NOT EXISTS `OfficeDB`.`reg_salary` (
`id_staff` INT NOT NULL,
`payment_date` DATE NOT NULL,
`amt` DECIMAL(10,2),
`comment` VARCHAR(150));

ALTER TABLE `OfficeDB`.`reg_salary` ADD FOREIGN KEY (`id_staff`) REFERENCES `lst_staff`(`id_staff`) ON DELETE RESTRICT ON UPDATE CASCADE;

#Создать триггер, который при добавлении нового сотрудника будет выплачивать ему вступительный бонус 10000, занося запись об этом в таблицу reg_salary.

DELIMITER //

CREATE TRIGGER new_staff AFTER INSERT ON `lst_staff`

FOR EACH ROW

BEGIN

INSERT INTO `reg_salary` (`id_staff`, `amt`, `payment_date`, `comment`) 
values (NEW.`id_staff`, 10000, CURDATE(), 'welcome bonus');

END

//

DELIMITER ;

INSERT INTO `OfficeDB`.`lst_dep` (`dep_title`) VALUES 
('Отдел продаж'),
('Отдел маркетинга'),
('Отдел персонала'),
('Производтво'),
('Администрация');

INSERT INTO `OfficeDB`.`lst_staff` (`name`, `surname`, `id_dep`, `position`, `salary`) VALUES
('Алексей', 'Иванов', 1, 'Консультант', 23000),
('Дмитрий', 'Петров', 1, 'Старший продавец', 25000),
('Петр', 'Сидоров', 1, 'Менеджер по продажам', 17000),
('Андрей', 'Дмитриева', 2, 'Продакт менеджер', 23000),
('Семен', 'Павлова', 2, 'Руководитель отдела маркетинга', 19000),
('Анна', 'Костонаева', 2, 'Маркетинг менеджер', 31000),
('Светлана', 'Изюмин', 3, 'Менеджер по кадрам', 16000),
('Генадий', 'Крот', 4, 'Токарь', 14000),
('Артем', 'Стриханов', 4, 'Начальник смены', 27000),
('Дмитрий', 'Коробец', 4, 'Директор производства', 21000),
('Алексей', 'Костанаев', 5, 'Генеральный директор', 40000);



#HW05 Домашнее задание
#1. Реализовать практические задания на примере других таблиц и запросов.
#2. Подумать, какие операции являются транзакционными, и написать несколько примеров с транзакционными запросами.

#Транзакция создает повышает ЗП лучшим сотрудникам на 20% а также, компенсирует им квартальное опаздание пересмотра зарплат в виде бонуса
SET SQL_SAFE_UPDATES=0;
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN;
#Приходится создавать временную таблицу для просеивания, если пытаться просеить через IN (SELECT ...) таблица блокируется для апдейта

CREATE TABLE `target_id` AS SELECT `id_staff` FROM `lst_staff` WHERE CONCAT(`name`,' ', `surname`) IN ('Алексей Иванов', 'Генадий Крот');

UPDATE `lst_staff` SET `salary` = 1.2 * `salary` WHERE `id_staff` IN (SELECT `id_staff` FROM `target_id`);

INSERT INTO `reg_salary` (`id_staff`, `amt`, `payment_date`, `comment`) SELECT `id_staff`, `salary` * 0.6, CURDATE(), 'Компенсация квартального опаздания пересмотра зарплат' FROM `lst_staff` WHERE `id_staff` IN (SELECT `id_staff` FROM `target_id`);
DROP TABLE `target_id`;

COMMIT;



#3. Проанализировать несколько запросов с помощью EXPLAIN.

#Анализ запросов отработанных в предыдущих уроках по базе 'Сотрудники'

#3.1 Выбрать среднюю зарплату по отделам.
EXPLAIN SELECT `lst_dep`.`dep_title` AS `Департамент`, ROUND(AVG(`lst_staff`.`salary`)) AS `Средняя ЗП`
FROM `lst_dep` LEFT JOIN `lst_staff` ON `lst_dep`.`id_dep` = `lst_staff`.`id_dep` 
GROUP BY `lst_dep`.`id_dep` ORDER BY `Средняя ЗП` DESC;
# filtered - (100,00) - не требует доработки

#3.2 Найти количество сотрудников в отделах и посмотреть, сколько всего денег получает отдел.

EXPLAIN SELECT `lst_dep`.`dep_title` AS `Департамент`, COUNT(`lst_staff`.`id_staff`) AS `Кол-во сотрудников`, SUM(`lst_staff`.`salary`) AS `Бюджет ЗП`
FROM `lst_dep` LEFT JOIN `lst_staff` ON `lst_dep`.`id_dep` = `lst_staff`.`id_dep`

GROUP BY `lst_dep`.`id_dep` ORDER BY `Бюджет ЗП` DESC;
# filtered - (100,00) - не требует доработки

#3.3 Показать данные по сотруднику Петр Сидоров
EXPLAIN SELECT 
CONCAT(`lst_staff`.`name`, ' ', `lst_staff`.`surname`) AS `ФИО`,
`lst_staff`.`salary` AS `ЗП`,
`lst_staff`.`position` AS `Должность`,
`lst_dep`.`dep_title` AS `Отдел`
FROM `lst_staff` LEFT JOIN `lst_dep` ON `lst_dep`.`id_dep` = `lst_staff`.`id_dep` 
WHERE `lst_staff`.`name` LIKE 'Петр' AND `lst_staff`.`surname` LIKE 'Сидоров';
# filtered - (9,09) - низкая эффективность работы. Создаем индекс для увеличения эффективности запроса
ALTER TABLE `OfficeDB`.`lst_staff` ADD INDEX (`name`, `surname`);
# filtered - (100,00) Благодаря добавления индекса эффективность возросла до 100%

#3.4 Показать данные по отделу
EXPLAIN SELECT 
CONCAT(`lst_staff`.`name`, ' ', `lst_staff`.`surname`) AS `ФИО`,
`lst_staff`.`salary` AS `ЗП`,
`lst_staff`.`position` AS `Должность`,
`lst_dep`.`dep_title` AS `Отдел`
FROM `lst_staff` LEFT JOIN `lst_dep` ON `lst_dep`.`id_dep` = `lst_staff`.`id_dep` 
WHERE `lst_dep`.`dep_title` LIKE 'Отдел маркетинга';
# filtered - (100) - Высокая эффективность т.к. для поля по которому проводится фильтрация создан UNIQUE индекс








